[metadata]
name = video-chapter-trimmer
version = attr: video_chapter_trimmer.__version__
author = Your Name
author_email = your.email@example.com
description = Extract and merge video segments based on chapter markers
long_description = file: README.md
long_description_content_type = text/markdown
url = https://github.com/yourusername/video-chapter-trimmer
project_urls =
    Bug Tracker = https://github.com/yourusername/video-chapter-trimmer/issues
    Documentation = https://github.com/yourusername/video-chapter-trimmer#readme
classifiers =
    Development Status :: 4 - Beta
    Intended Audience :: End Users/Desktop
    Topic :: Multimedia :: Video
    License :: OSI Approved :: MIT License
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.11
    Operating System :: OS Independent

[options]
package_dir =
    = src
packages = find:
python_requires = >=3.7
install_requires =

[options.packages.find]
where = src

[options.entry_points]
console_scripts =
    video-chapter-trimmer = video_chapter_trimmer.cli:main

[options.extras_require]
dev =
    pytest>=7.0
    pytest-cov>=4.0
    pytest-mock>=3.10
    black>=22.0
    flake8>=5.0
    mypy>=1.0
    pre-commit>=3.0
    tox>=4.0
test =
    pytest>=7.0
    pytest-cov>=4.0
    pytest-mock>=3.10

[bdist_wheel]
universal = 1

[flake8]
max-line-length = 88
extend-ignore = E203, W503
exclude =
    .git,
    __pycache__,
    docs/source/conf.py,
    old,
    build,
    dist,
    .eggs,
    *.egg

[mypy]
python_version = 3.7
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True

[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = -ra -q --strict-markers

[coverage:run]
source = video_chapter_trimmer
omit = 
    */tests/*
    */__init__.py
    */setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.: